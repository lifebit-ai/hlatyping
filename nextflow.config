/*
 * -------------------------------------------------
 *  nf-core/hlatyping Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 * Cluster-specific config options should be saved
 * in the conf folder and imported under a profile
 * name here.
 */

// Global default params, used in configs
params {

  container = 'nfcore/hlatyping:latest' // Container slug. Stable releases should specify release tag!
  
  help = false
  outdir = './results'
  bam = false
  singleEnd = false
  reads = 'data/test*{1,2}.fq.gz'
  readPaths = ''
  seqtype = 'dna'
  solver = 'glpk'
  igenomes_base = "./iGenomes"
  multiqc_config = "$baseDir/conf/multiqc_config.yaml"
  clusterOptions = false
  enumerations = 1
  beta = 0.009
  prefix = 'hla_run'
  index = "$baseDir/data/indices/yara/hla_reference_dna"

  igenomesIgnore = false
  custom_config_version = 'master'
}


// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
includeConfig "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}/nfcore_custom.config"

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  conda { process.conda = "$baseDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    process.container = params.container
  }
  singularity {
    singularity.enabled = true
    process.container = {"shub://${params.container.replace('nfcore', 'nf-core')}"}
  }
  test { includeConfig 'conf/test.config' }
  test_fastq { includeConfig 'conf/test_fastq.config'}
}

// Load igenomes.config if required
if(!params.igenomesIgnore){
  includeConfig 'conf/igenomes.config'
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.outdir}/pipeline_info/nf-core/hlatyping_timeline.html"
}
report {
  enabled = true
  file = "${params.outdir}/pipeline_info/nf-core/hlatyping_report.html"
}
trace {
  enabled = true
  file = "${params.outdir}/pipeline_info/nf-core/hlatyping_trace.txt"
}
dag {
  enabled = true
  file = "${params.outdir}/pipeline_info/nf-core/hlatyping_dag.svg"
}

manifest {
  name = 'nf-core/hlatyping'
  version = '1.2dev'
  nextflowVersion = '>=18.10.1'
  description = 'Precision HLA typing from next-generation sequencing data.'
  mainScript = 'main.nf'
  homePage = 'https://github.com/nf-core/hlatyping'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
